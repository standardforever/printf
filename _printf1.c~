#include "main.h"

/**
 * _alloc_mem - it allocate a memory using malloc
 * int count: the total of of count of the parametr.
 * Return: pointer to the allocated memory
 */

char *_alloc_mem(int count)
{
	char *str = malloc(count * sizeof(int));
	if (str == NULL)
		return ('\0');
	return (str);
}

/**
 * _count - it count the total nubmers of character given
 * @format: is a pointer that point to the string to be counted
 * @args: it takes va_list of 
 * Return: an int of the count
 */
int _count(const char *format, va_list args)
{
	int i, j, count = 0;
	char *s;

	for (i = 0; format[i]; i++)
	{
		if (format[i] == '%')
		{
			switch (format[i + 1])
			{
				case 'c':
					count--;
					break;
				case 's':
					count -= 2;
					s = va_arg(args, char *);
					for (j = 0; s[j]; j++)
						count++;
					break;
				default:
					break;
			}
		}
		count++;
	}
	return (count);
}

/**
 * _printf - it print an input
 * @format: it's a pointer to a string
 * Description:  it takes a string and check if it sees '%s' or '%c, if yes
 *               it takes the matched argumetn from arg_list and print it.
 * Return: it returns the string pointered to by format.
 */
int print(const char *format, va_list arg);

int _printf(const char *format, ...)
{
	int count = 0;
	int str;
	va_list chara;

	va_start(chara, format);

	str = print(format, chara);
	va_end(chara);
	return (write(1, &str, 5));

}


int print(const char *format, va_list arg)
{
	int j, i, k, count = 0;
	char *str;
	char *s;

	count = _count(format, arg);
	va_end(arg);

	printf("%i", count);
	str = _alloc_mem(count);
	j = 0, count = 0;
	for (i = 0; format[i]; i++, j++)
	{
		if (format[i] == '%')
		{
			switch (format[i + 1])
			{
				case 'c':
					str[j] = va_arg(arg, int);
					count++;
					i++;
					break;
				case 's':
					s = va_arg(arg, char *);
					for (k = 0; s[k] != '\0'; k++, j++, count++)
						str[j] = s[k];
					i++;
					count++;
					break;
				default:
					count++;
					str[j] = format[i];
					break;
			}
		}
		else
		{
			str[j] = format[i];
			count++;
		}
	}
	return (write(1, str, count++));
}
